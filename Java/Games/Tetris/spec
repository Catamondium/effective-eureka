Sources:
	http://tetris.wikia.com/wiki/Tetris_Guideline
	https://www.dropbox.com/s/g55gwls0h2muqzn/tetris_guideline_docs_2009.zip

Central datatype:
	Matrix w/ Linear array w/ access methods

Matrix:
	clearRows()
	clearRows()
	translateRows()
	query()
	show()
	commit()

Tile:
	Type
	orientation?

Tetrimino(player):
	Coordinates array
	Type
	translate(x, y)
	drop():
		translate(lowestOccupied+1)
	show()
	check():
		Collision
		winRows --> matrix.clearRows()
	rotate(+- or 0-3):
		NO-OP: O
		Block-centred: L, J, Z, S
			translate origin
			(x,y) --> (-y, x)
			restore centre
	edges()

Field:
	Matrix(10, 20 (+2 spawn buffer))
	show(x, y, width, height, Grid)
	spawn(5, 0), randomised
	Every frame:
		Check stacked:
			Lose
			Win
			spawn
		translate tet(0, 1)

Game:
	Win:
		Filled rows:
			1 (50pts)
			2 (200pts)
			3 (400pts)
			4 (800pts)
		Shift down by filled rows
	Lose:
		Any column hits top+1

Interaction:	
	UP/W:
		Rotate(clockwise, .5PI): // Implement -.5PI later
			see img for centres
	DOWN/S:
		Drop
	LEFT/A:
		Translate(-1, 0)
	RIGHT/D:
		Translate(1, 0)

Tetromino:
	length: 4 tiles
	Spawn positions converted into PVectors on construction
	
	I: cyan
		Rotate: Block-centred w/ centre exception, !floating centre: (5.5, -0.5)
		0001111000
		0000000000
		[[4, 0],
		[7, 0],
		[5, 0], //
		[6, 0]] // centre between these and to the bottom in this position
	O: yellow
		Rotate: NO-OP
		0000110000
		0000110000
		[[5, 0],
		[6, 0],
		[5, 1],
		[5, 1]]
	T: purple
		0000100000
		0001110000
		[[4, 1],
		[5, 0],
		[6, 1],
		[5, 1]] :centre
	S: green
		0000110000
		0001100000
		[[5, 0],
		[6, 0],
		[4, 1],
		[5, 1]] :centre
	Z: red
		0001100000
		0000110000
		[[4, 0],
		[5, 0],
		[6, 1],
		[5, 1]] :centre
	L: orange
		0001000000
		0001110000
		[[4, 0],
		[4, 1],
		[6, 1],
		[5, 1]] :centre
	J: blue
		0000010000
		0001110000
		[[6, 0],
		[4, 1],
		[6, 1],
		[5, 1]] :centre
